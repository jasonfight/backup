第一节:python简介
python:
一种解释型的 面向对象的 带有动态语义的高级程序设计语言
简史:
1989年圣诞节 在阿姆斯特丹发明  发明者为为 guido
CNRI时期   由VNRI资助 guido 进行python的开发   1.5之前在此时期内完成
BeOpen  与BeOpen合作  推出2.0版本   同时推出1.6版本
DC时期   guido离开 BeOpen  来到   DC  该公司一Zope系统闻名
python 3.0
里程碑:
 获得 Tiobe 编程语言大奖
第二节 python 特征:
 脚本语言   scripting language
 高阶动态编程语言

 1.简单易学 简单主义思想的语言,伪代码本质,让用户能够专注于解决问题而不是搞明白语言本身,
 2.解释性&编译性:不需要编译成二进制代码,可以直接从源代码运行程序,但需要解释器, 类似于java
 或是Matlab,python中也有编译执行的特性
 3.面向对象,既支持面向过程,也支持面向对象
 4.是一门高级语言
 5.可扩展,可嵌入
 6.免费开源
 7.可移植性强,
 8.拥有丰富的库
 python  可以看做是一门胶水语言,为其他语言作为辅助,
第三节   python的应用
    web服务器编程,数据挖掘,自然语言处理,自动化测试.
第四节  python 环境搭建

python交互模式的启动: 在终端直接输入python    exit 退出
 python 文档
 以#!/usr/bin/python  为首行
 1.源代码的文件以.py为后缀名,有python程序解释.不需要编译
2.字节码文件 扩展名为  .pyc
  编译方法:
  新建立一个扩展名为.py的文件  输入:
  improt py_compile
  py_compile.compile("1.py")//1.py  为需要编译的文件名

  生成 1.pyc 的文件   可用 python 1.pyc 直接执行,执行效果与,1.py效果一样
3.优化代码:
  python -O -m py_compile 1.py   生成1.pyo的文件,执行效果与1.py 一样

第五节:python数据类型：

数字，字符串，列表，元祖，字典。
1.数字:整型:int;浮点:float;

变量:
变量是计算机内存中的一块区域,变量可以存储规定范围内的值,而且可以改变
变量命名规则：
变量名由:字母、数字、下滑线组成
数字不能作为开头,不能使用关键字
变量的赋值:
a=1
ld(a)  用来查看a变量的内存存储地址

运算:
赋值: = += -=...  特殊赋值:a,b=1,2--->a = 1 b = 2;ab交换:a,b = b,a;
数学运算: + - * /    python3 中除法不在整除,直接是真除法. "//"为假除法,即整除.


逻辑运算: and;  or;  not;  ==;  !=; >=; <=; a<b<c ; is; is not; in; not in;
python中0为假  非零为真;

位运算: 左位移运算:<<;  右位移运算:>>;  与运算:&; 或运算:|; 异或运算: ^; 非运算:~;

异或运算(^):

赋值运算:
  ab交换的三种方式:
  1) a ^= b  b ^= a  a ^= b; 等价于: a=a^b b=a^b a=a^b;
  2) a,b=b,a;
  3) tmp=a  a=b  b=tmp;
位运算:
异或运算: ^ ,计算原则:相同为0,不同为1;
异或运算是将数值转化为二进制数值之后,然后通过两个二进制数的比较来进行运算,运算规则为:相同为0,不同为1:
		eg:
		a=1,换算为二进制为:01;b=2,换算为二进制为 10;
		a^b的运算为: 0 1
				 ^ 1 0
			 结果为:1 1
		结果为 11;转化为 10 进制数为3;
		所以: a^b=3;

左移位运算:<< 换算为2进制数,然后整体左移,最右边用0补位;
右移位运算:>> 换算为2进制数,整体右移,最右边减位(即向右移动几位,原先右边的几位数删掉);
与运算:& 一假则假;
或运算:| 一真则真;
python支持+= -=等运算 ,但不支持 ++  --  运算;

==================================================================
11.29
一.字符串:
	0个或多个字符组成的有限串行,当为0个时,为空字符串.逻辑上,空字符串为假,非空字符串为真.
三重引号的作用:原样输出,(目前了解这些,后面还有生成帮助文档的作用)
  转义字符:
  \n:换行    \t:tab键;   \r:回车键

字符串操作:
  支持+和*:
  +  :拼接
  *:重复
  转换操作:
  1 str()
  2 repr()
  2 `str` (3.x版本中不再支持该命令.)
  切片操作:
  a[1:2:3]:1为开始下标位置,2为结束下标位置,3为步长.
  下标从0开始,
  a[::-1]:将字符串倒过来
  a[1:8]:从下标为1取到下标为8的位置(不包括下表为8的位置,只是从1取到7位置).
  a[1:10:1] 从下标为1到下标10,以步长为1提取字符,
    eg:
    a='123456789'
    a[0:8:2]  输出结果为:'1357'
二.输入和输出:
1.输入:
  input:按照严格python语句标准输入内容,
  raw_input:输入字符串
  python3: 只有input语法,与python2中raw_input用法一致
2.输出:
  print a
    需要不换行时,在最后面加逗号,也可以通过逗号来进行输出内容的叠加.
      eg: print "a","b"   输出结果为: a b
  python3中,print(a)为输出,
    需要不换行时: print(a,end="")
3.输出格式控制:
    要打印出%时  需要输入%%,
    %d:整型;  eg: print "%d"%a   print "%d %d"%(a,b) 传入两个数值,个数严格匹配
		eg:a=1;b=2
		print '%d'%a--->1	(以后默认--->后面的值为前面语句的输出结果)
		print '%d %d'%(a,b)--->1 2

    %f:浮点型   eg:a=1.23 print "%.1f"%a --->1.2
    %e:科学计数法
    %E:科学计数法(大写)
    %o:八进制数
    %x:十六进制数
    %X:十六进制数(大写)
    %r:字符串(使用repr转款任意python对象)
    %s:字符串(使用str转换任意python对象)

    修饰符号:
    -:左对齐
    +:转换之前加上正号
    "":空白字符,正数之前保留空格
    0:位数不够时,使用0补齐
    .:精度
三注释:
	#加注释内容
    python没有多行注释,但是 ''' 注释内容  ''' 可以看做到多行注释的效果(实际上是原样输出,用来添加程序的说明文档).

四.列表: list
1.相关定义:
     命名规则:l=[],列表是有序的,从下标0开始计算,列表中可以存储其他类型.
     列表是可变数据类型
     列表支持切片操作
2.列表的操作:
     1)l.append(X) 在列表最后添加X值
     2)l.extend([5,6,7]) 在列表后面添加列表,也可在括号中直接添加列表变量
     3)l.insert(I,X) 在下标为I的值前面添加值X
     4)l.index(X)  将值X的下标显示出来
     5)l.count(X)  将列表中值X出现的次数显示出来
     6)l.sort()    将列表中的值按照从小到大排列,如果为字符,则按照字符的ascii码逐个比较,按照从小到大的顺序排列出来.
     7)del l[I]    删除下标为I的值
     8)l.remove(X) 删除值为X的第一个值.
     9)l.pop()	   弹出列表中的最后一个值
     9)l.pop(I)    将下标为I的值弹出列表,pop()不支持通过值来弹出列表
字符串的高级操作:
    a="hello,world,nihao"
    a.split(',')  分割:用逗号做分割点,将字符串a分割成为一个列表.
    "*".join(a)   拼接:用*将a列表的所有元素连接起来.

五.元组: tuple()
     元组和列表的唯一区别就是元组不可改变


=======================================================================
11.30
六.字典: dict
1.相关定义:
    字典是python中位移的映射类型(哈希表)
    字典的对象是可变的,但是字典的键必须使用不可变对象,并且一个字典中可以使用不同类型的键值对
    key()返回键列表,value()返回值列表
    iterms()返回包含键值对的元组.
   	语法:dic={'key1':'value1','key2':'value2'...}如果为数字,不用加引号
    键可以为变量,数字,字符串和元组,不能为列表.
    元素可为变量,数字,字符串,列表和元组
2.字典操作:
    dic.value() 	列出所有元素(dic为字典变量名,下同)
    dic.keys()   	列出所有键
    dic.items() 	列出所有键值对,以列表的形式,每一个键值对为一个元组
    len(dic)    	列出字典长度
    dic.get(key) 	显示key相应的元素值
    dic.update(dic2) 	将dic与dic2合并
    dic['tel']='123456' 在dic中添加一键值对, 'tel'为键, '123456'为值
    dic['tel']=2323232 	在dic中更改一键值对  如果键'tel'已经存在,则修改键值对
    del dic['tel'] 		在dic中删除键为 'tel' 的键值对;
    dic.pop('tel') 		删除键为 'tel' 的键值对,并返回键为 'tel' 的值.
    dic.clear() 		删除字典中的所有元素.该操作之后,字典为空字典
    del dic 			删除整个字典,名为dic的字典将不存在.
七.集合:set
1.相关定义:
  语法:s={1,2,3,4,5} 或者s=set([1,2,3,4,5]),二者等价.s{}为空字典,s=set(),为空集合
  集合是一个整体,不能单独操作其中的一个元素.
  操作:
    s.add(X)  在集合中添加值X的元素
  	s.pop(X)  在集合中弹出值为X的元素
    s.clear() 清空集合
    s.remove(X) 删除集合中值为X的元素


    s=forzenset{1,2} 定义一个不可变的集合
2.集合的运算:
  in: 	1 in a   	判断1是否在a中存在,若存在,则返回True.
  -: 	s1 - s2   	输出s1中与s2不重复的值
  |:  	并集       	输出s1与s2的并集
  &: 	交集       	输出与s1的s2交集
  ^: 	补集       	输出与s1的s2补集


数据类型总结:
1.布尔类型(bool):只有两个值:True,False, 逻辑运算得到的结果为bool类型
2.空类型(NoneType):  None  空  占位变量
3.数字类型:
    整型:int,不可变, 支持数学运算,位运算等
    浮点型:float
4.字符串类型(str):   有序的   不可变;  +*运算, 属性方法,切片操作,  in逻辑
5.列表(list):       有序的   可变的;  +*运算, 属性方法,切片操作,  in逻辑
6.元组(tuple):      有序的   不可变;  +*运算, 属性方法,切片操作,  in逻辑
7.字典(dict):       无序的   可变的;         属性方法,          in逻辑
8.集合(set):        无序的   可变的;        - | & ^运算,       in逻辑
9.frozenset        无序的    不可变;       - | & ^运算,        in逻辑

copy:
deepcopy:
语法:
import copy (引入copy模块)
l=[1,2]
l1=l               完全复制l的属性,l改变是,l1也跟着改变;
l2=copy.copy(l)    复制子元素的属性,当对l的子元素进行操作时,l2也执行该操作.  ''' 待确认''''
l3=copy.deepcopy(l) l3完全脱离l,l的任何操作,对于l3没有效果



第六节: 语句:
语句一般分为三种:
1)顺序结构
2)分支(选择)结构: if else;elif
3)循环结构:       for;while

缩进风格:python的语句控制完全由缩进来控制,每一行的结束代表该语句的结束.如果一行没有输完,可以在行尾输入反斜杠符号来在下一行的输入.


一 if 语句
1.if 语句:
        if 逻辑表达式1:
            命令1
2.if else 语句:
        if 逻辑表达式1:
            命令1
        else:
            命令2

3.elif 语句:
        if 逻辑表达式1 :
            命令1
        elif 逻辑表达式2 :
            命令2
        elif 逻辑表达式3 :
            命令3
        else: 命令4

4.if 语句的嵌套
        if 逻辑表达式1:
            if 逻辑表达式2:
                命令1
二 while 循环语句:
1. while 语句
        while 逻辑表达式1:
    	       命令1
2. while  else 语句
        while 逻辑表达式1:
            命令1
        else:
            命令2
三 for语句:

1.for 语句:
      for i in 列表:     (in 后面可为:字符串,元组,列表,字典,集合)
            命令1

2.for else 语句:
      for i in 列表:
        命令1
      else:
        命令2

3.使用for循环生成列表:
[x for x in range(10)] --->[0,1,2,3,4,5,6,7,8,9]

4.使用range()函数商城列表
    语法: range(stop)或者 range(start,[,stop] [,step])
    eg: range(3)--->[0,1,2,]
    eg range(0,6,2)---> [0,2,4]
四. 辅助语句:
1.continue:
    跳出本次循环,继续本层下一次循环,
2.break:
    本层循环结束.
3.pass 语句:
    占位语句,没有任何作用.
4.return 语句:
    return 语句表示函数的结束,代码执行到return中,会立即返回并结束.
5. zip 和 map (有点问题,待确认)
    zip 和 map 函数是用来处理并遍历,其中 zip 在python2和3 都支持,而map只在python2中支持.
    eg:
    l1=[1,2,3,4]
    l2=['a','b','c','d']
    zip(l1,l2)--->[(1,'a'),(2,'b'),(3,'c'),(4,'d')]
    如果l1与l2长度不一致,则会自动以短的列表为准.而如果使用map函数,则会用None进行补齐



==================================================================
12.02
函数:(尚未整理,先不用看)
一.区分三个概念:
函数:外部写的一个代码块,可以完成一定的功能,
方法:通常是写在类中的函数,称为方法,
API:接口,可为函数或类的接口,所有的封装内容,通过外部使用来使用.
二.什么是函数:
  一个完成特定功能的代码块,其程序独立,有返回值或空值,即一些语句的集合,能够多次运行.
是一个程序中,最小的封装单元.

三.为什么用函数:
  1.可以重复使用,
  2.增加封装特性,代码保密,规定使用方法,使用者无需了解实现机制,使代码美观.

内建函数:系统定义好的函数,

函数三要素:
1.功能:设计函数的前提,即函数要实现什么,决定了一个函数的复杂程度,运用什么方法,使用什么逻辑.
2.参数:也叫参变量,是一个变量,可成为形参,在调用前不占内存,只有调用时载入内存,参数作为函数的对外接口
是使用一个函数的必须掌握的内容.
3.返回值:返回值是函数执行完毕之后以调用形似返回给调用者的结果,一个函数可以没有返回值,没有返回值时,返回值为None,有返回值时
,用return来标识.


设计函数:

查看内建函数:dir(__builtin__),可以查看所有的内建函数.可以是用help(functionname)来查看函数的功能和使用方法



传参:
当传入的是一个不可变的数据类型时,为值传递,当为可变数据类型时,为地址传递.

定义:位置传参: fun(a,b)


全局变量和局部变量:
全局变量的作用域为全局
局部变量的作用域为函数内,当局部变量与全局变量命名冲突时,函数内默认使用局部变量;
当在函数内需要调用全局变量时,只要函数内部没有重复的变量名,就可以直接调用,但不能更改,
如果需要进行更改,需要在调用前加 global name 加以声明, 之后就可以对全局变量进行修改,
修改后的变量在全局生效.
