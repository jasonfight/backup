正则表达式：
使用规则：
*    0个或多个在 * 字符之前的那个普通字符  hel*o   -->   helo   hello  helllllo  匹配0个或多个l
.    匹配任意一个字符
^    匹配行首
$    匹配行尾

^$      匹配空行
^....$  匹配一个整行的内容
[]      匹配字符集合，匹配其中的一个字符，可以是穷举法或者范围（穷举法:[abc] 范围:[1-9a-zA-Z]）
[^...]  匹配除了...之外的，
\       转义字符，屏蔽一个字符的特殊意义
\<...\> 精确匹配，
\{n\}   匹配前面字符出现n次
\{n,\}   匹配前面字符 至少出现n次
\{n,m\}  匹配前面字符出现n到m次

扩展正则表达式匹配
awk  perl
 ？      匹配0的或1个之前的字符
 +      匹配1个或多个之前的那个普通字符
（）      表示一个字符集合
|        表示或
（a | b | c）---->   [abc]

grep -c  输出符合条件的行数
grep -n  输出带行号的符合条件的内容
grep -v  输出符合条件以外的其他内容
grep -i  在筛选时不区分大小写
grep -h  不显示多个文件查找时的文件名
grep -l  只显示符合条件的文件名，不显示文件内容
grep -r  在当前文件夹及其子目录中逐层查找
grep -E  支持扩展正则表达式
grep -e  实现多个查询条件


vim的使用：
打开终端：

Ctrl+Alt+t  打开终端
Ctrl+Shift+n 打开终端，调整到当前文件夹
两者可以在Ctrl + Tab切换
Ctrl + Shift +t 进入类似浏览器的打开方式来打开几个终端  Alt 123来切换
exit  退出终端

vim的使用：
三种模式： 命令模式 底行模式  插入模式
如何进入插入模式：
i   在光标所在位置进入插入模式
I   在行首位置进入插入模式
o   在下一行
O   在当前行
a   在光标后
A   在行尾
s   在删除光标所在字符后，进入插入模式
S   在删除光标所在行，进入插入模式
光标跳转命令：
b 单词开头 e 单词结尾 w下一个单词 0行首 $行尾
cc  删除当前行，进入插入模式
c+b|e|w|0|$   分别为删除光标到指定位置
u   撤销上一步操作
ctrl + r  反撤销
x  删除字符
r   替换字符
R   进入替换状态，直到 Esc 退出
底行模式：
/  进入查找状态  输入要查找的字符后 字符变为高亮  选择n进行跳转
： 进入底行命令，noh  去除高亮
！ 强制执行

：n,my
:n,md
:w filename
:read filename   将其他文件的文件内容添加到本文件中
分屏：



sed

sed 命令及sed编程

sed是一个非交互式的文本编辑器

sed主要应用场景：

1 编辑相对交互式文本编辑器而言太大的文件
2 编辑命令太复杂，在交互式文本编辑器中难以输入
3 对文件扫描一遍，但是需要执行多个编辑函数的情况

运行：
1 在shell命令行输入sed命令
sed [选项] 'sed命令'  输入文件

2 在sed中插入脚本
./sed
选项：
-n   不打印所有行到标准输出

-e    表示下一个字符串是sed命令

-f    表示正在调用脚本文件

命令
1 要操作的范围
  使用行号或者正则表达式
  x   指定行号
  x,y 指定从x行到y行

  /pattern/ 查询包含模式的行
  /pattern/pattern/
  /pattern/,x 从匹配行到x行，如果有多个匹配结果，从第一个开始
  x,/pattern/ 从x行到匹配行
  x,y！ 指定不包含x行和y行

命令：
p  打印匹配行
