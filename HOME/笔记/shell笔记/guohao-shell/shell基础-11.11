2016.11.08
linux 内核
linux操作系统的组成
shell：shell指令，基础指令，文件操作指令，实用程序
外存储器—————————内存储器（主存储器）————缓存（寄存器）

bin  可执行二进制文件
dev  驱动设备文件
etc  系统相关配置文件
home 存放用户文件夹
lib  库文件
media 临时挂载文件
mnt  系统挂载文件
root  root用户
proc 临时文件
var  虚拟文件
usr  用户文件夹

多个命令之间 加分号 可以写在同一行

shell  命令的有序集合

新建一个.sh 的文件，输入：
#！bin/bash
各种命令的集合
保存并退出

使用命令 bash 文件名 来执行或者 ./文件名 来执行



 > 输出重定向（覆盖模式）
	eg:  ls > file
 1.先创建一个file文件
 2.在将 ls 应该输出的内容覆盖到file中
 3.原先file中的内容被完全擦除。

 >> 输出重定向（追加模式）
	eg:  ls >> file
  1.创建一个file文件
  2.将 ls 应该输出的内容追加到file中
  3.原先file中的内容不变。

 <  输入重定向   将file重新定向为输入源
	eg: cat < file  //将file中的内容作为输入项传递到前面的命令，file必须存在
 2> 或 &>  错误信息重定向
	eg:  ls aa 2> file   // 先创建file文件，然后将应该输出的错误信息放到file中，
	eg:  ls aa 2>> file   // 先创建file文件，然后将应该输出的错误信息追加到file中，

 `   引入一个命令的结果
	eg: ls `pwd

 echo  输出命令后面的字符串，字符串是否添加双引号，有区别

 head   显示文件前10行的内容， head  -3 file   //显示file前三行内容
 tail   显示文件后10行的内容， tail -3 file   //显示file后三行内容
 sort    按次序显示文件
 uniq   去掉文件中重复的内容并在终端显示处理后的文件内容
 diff	比较两个文件的异同    diff file file1   //输出两个文件中不同的内容
 file	  查看文件类型          file  file1  	//输出file1文件的文件类型
 which  查看命令是否存在，并且显示命令的位置
 whereis  搜索程序名，而诶只能搜索二进制文件（-b）。说明文件（-m）和源代码文件（-s）

文件类型：
- 普通文件
b 驱动文件
c 字符文件
d 目录文件
l 链接文件
p 管道文件
s 套接字文件


进制转化
八进制  0-7   3位字符     二进制的 111 为八进制的 7
十六进制 0-9 A-F  4位字符  二进制的 1111  为十六机制的 F
八进制和十六进制转化

   file.sh 文件的执行
   1.bash .sh
   2. ./ file.sh
   3.  u g o a  +  -  r w x    // u user   g    group     o  other   a   all

IP网络设置基础

查看ip:  ifconfig

192.168.1.1    //最后一段 一般为2-254

设置静态IP
1.打开网络链接
2.单击增加
3.选择以太网
4.选择IPv4
5.设置 方法 为 手动
6.地址栏 单击 增加
7.地址：  新的IP 地址     子网掩码  255.255.255.0   网关 192.168.1.1   新增DNS服务器 192.168.1.1
8 保存

shell程序
   将所有shell程序都创建在 shell目录中
   编程语言类型  编译型：编译效率高  解释型：开发效率高
建立shell脚本的过程
1.建立文件并编译（文件以.sh作为后缀名，文件名原则上用字母 数字 下划线的组合，
  通常以字母开头，有一定意义为好）
2.修改权限，江边及的脚本添加可执行权限
3.执行    如果脚本有可执行权限，可以用./file 直接执行，
         如果脚本没有可执行权限，使用 bash file 声明解释器执行

shell变量：一个标识，用来存储具体的值
变量的使用和命名规则：

1.由数字。字母。下划线开头
2.不能以数字开头
3.不能以关键字命名
4.shell中区分大小写

只有数据和字符串类型
shell是若类型语言
注意：	1.赋值时，等号两边不要有空格，
	2.可以用unset删除一个变量的复制
	3.在取变量值时，可以使用$符号

 echo 			// 打印 命令后面的字符
 echo " "		// 打印双引号内的字符，变量会以变量值的形式出现
 echo ' '		// 打印引号得的字符，变量会以字符串的形式出现
 位置变量     //

 echo "\$0=$0"   // /为转义符号， $0 为当前脚本名称
 ＄１－９　        //表示１－９　９个位置的传入
 ＄｛１０｝          //传入字符串中间如果有空格需要用　“”包裹字符串　　
　＄＃　命令行参数的个数，不包含命令本身
　＄？　显示前一个命令的退出状态，如果正常为0　否则为非1
  $@

export PATH+=":/home/jason/" // 将jason文件夹添加到环境变量中。
该文件夹中的fil.sh文件执行时 可直接 输入文件名来执行。


shell语句





===============================================================================
11.09

 echo -n  //输出内容后不换行

 /etc/initd   //系统启动文件夹

DATE=`date`		//引用date命令的结果赋值给DATE
expr 计算结果
  	expr  1 + 2	//加运算  运算符号两边要加空格
	expr  1 - 2	//减运算  运算符号两边要加空格
	expr  1 \* 2	//乘运算  运算符号两边要加空格
	expr  1 / 2	//整除运算  运算符号两边要加空格
	expr  1 % 2	//求余运算  运算符号两边要加空格







测试：
True False
测试的三种属性
数字  字符 类型

数值测试
-eq  等于
-ne   不等于
-gt   大于
-lt   小于
-ge   大于等于
-le   小于等于

字符测试
s1 = s2     //判断s1 s2是否相等，等号两边需要加空格
s1 ！= s2    //判断s1 s2是否相等
-z s1      //判断s1字符串长度是否为0
-n s1       //判断s1字符创长度是否不为0

文件测试
-d name 测试name是否是一个目录
-e name 测试name是否存在
-f name 测试name是否是一个文件
-L name 测试name是否是一个软连接
-r name 测试name是否可读
-w name 测试name是否可写
-x name 测试name是可执行
-s name 测试name是否是否长度为0
f1 -nt f2  测试f1 是否比f2 更新
f1 -ot f2   测试 f1 是否比f2 更旧

test  可用 [ ] 来代替，中括号中有空格

逻辑判断

&&   ||    ！
-a   -o     ！
与：一假则假   [ 1 -eq 2 -a  -eq 1 ]    [ 1 -eq 2] && [ 1 -eq 1 ]
或：一真则真   [ 1 -eq 2 -o  -eq 1 ]    [ 1 -eq 2] || [ 1 -eq 1 ]
非： 真变假，假变真  ! [ 1 -eq 2 ]

结构语句

条件语句
 if 语句
 简单的if语句
    if  表达式
        then  命令表
    fi

elif语句
	if 表达式
	   then  命令表
	elif 表达式
	   then  命令表





=================================================================
11.10

循环语句：

for语句


for 变量名 in 单词表
do  命令表
done

{}的用法
没有单词表的时候，默认根据 命令后面输入的参数来执行，不可以使用变量

exit 1 //异常退出
exit 0  //正常退出

 "$$"
 "$!"
 "$?"
 "$*"
"$@"
 "$#"
 "$0"
"$1"
 "$2
 [Aric@localhost ~]$ bash params.sh 123456 QQ
The complete list is 24249
The complete list is
The complete list is 0
The complete list is 123456 QQ
The complete list is 123456
The complete list is QQ
The complete list is 2
The complete list is params.sh
The complete list is 123456
The complete list is QQ

while循环

while  逻辑表达式
do
  命令表达式
done

continue // 结束本次循环，进入下一循环
break   //  跳出循环，终止循环

先确认输入的数字
========================================================================
11.11
函数
1.函数必须先定义后使用
2.目的：为了代码的复用，封装性的基本体现
3.在shell中，函数的定义和实现是在一起的
4.函数的三要素：功能，参数，返回值
5.在shell中，也有内建函数和自定义函数。

function name(parameter) {
  conmand1
  ......
  conmandn
}


返回值

value=`fun  //返回值赋值给 value
$？     //返回状态


作用域

局部作用域：在函数里面
只有在作用范围内可以使用
在函数内 ： local  name    较节省内存， 函数执行完毕后，占用内存释放
全局作用域：在函数之外
可以在文件的任意位置使用。

当局部变量与全局变量重名时，在局部范围内，会默认使用局部变量。


递归函数（递归调用）

函数内部调用函数自身。
注意：要有结束条件

&& 列表   从左往右执行，直到出现错误命令
|| 列表   从左往右，只执行第一个正确的命令。
set的使用
set -e      打开错误调试
set +e      关闭错误调试
set -x      列出每一步的运算结果
set +x      关闭列出每一步的运算结果

数组：
数据的集合
如何定义数组： array_name=(1 2 3 4 5 6 7 8)
数组的取值：
