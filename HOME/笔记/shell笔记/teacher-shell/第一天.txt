
2016.11.08   第一天

吕泽  lvze@cainiaoketang.com

      1259296994


linux    来源   发展和应用   特点   

	linux：内核 
        linux操作系统的组成

shell ：shell指令  基础指令，文件操作指令，系统操作指令。。。。。

软件的安装


外存储器 ----- 内存储器（主存储器）---- 缓存 （寄存器）


1T = 1024 G 

1G = 1024 M

1M = 1024 K

1K = 1024 Byte（字节）

1B = 8 bit （位）

> 输出重定向  

eg ：ls > file 

1 创建file文件
2 将ls原本输出的内容放到 file中
3 如果原来存在file文件，那么会先擦除原有内容

>> 输出重定向

eg： cat test >>  file 

1 创建file文件
2 将ls原本输出的内容放到 file中
3 如果原来存在file文件，那么会以追加的方式将新的内容写入文件中

输入重定向
eg： wc <  file 

1 file必须存在
2 将file中的内容作为输入传递给前一个命令


2>  &> 

eg： ls aa > file 

1 file 不存在则创建
2 将原本的错误信息放到file中
3 如果是2>>  &>> 则为追加

echo ： 打印字符串

`` ： 引用命令结果


head tail

diff

file

whereis
which



2  8  10   16 ( 0--9 a b c d e f)

练习1 ：进制转换


ｃｈｍｏｄ　　　u　＋／－　ｒ／ｗ／ｘ　　filename
　　　　　　　　g
	o
	a



什么是　ＩＰ　　子网掩码，　网管，广播地址　，dns



１　shell脚本的本质　：　shell命令的有序集合


建立shell脚本的过程

１　建立文件并编译　　　（文件以　．ｓｈ　为后缀。文件名原则上用字母数字下划线的组合，通常以字母开头有一定意义为好）

２　修改权限　　将编辑的脚本添加可执行权限

３　执行　　如果脚本有可执行权限　可以用　．／filename　　直接执行
　　　　　　如果没有执行权限　可以使用　bash filename　声明解释器执行


变量　：　需要是合法的标示符

１．　数字字母下划线组成
２.　不能以数字开头
３.　不能和关键字重名（shell　命令）
４．　shell　中是区分大小写的


数字和字符串类型
shell是弱类型语言


注意点　：　变量赋值时等号两边不要有空格
　　　　　　可以用unset删除一个变量的赋值
　　　　　　在取变量值的时候用＄


位置变量　：　在执行脚本时，通过命令行进行传入的参数就叫做位置变量

　　＄０　脚本名
　　＄１　－９　表示１－９　９个位置的传入
　　＄｛１０｝
　　
　　传入字符串中间有空格需要用　“”　　
　　＄＃　命令行参数的个数，不包含命令本身
　　＄？　显示前一个命令的推出状态，如果正常为0　否则为非0

export 添加环境变量

HOME PATH

export PATH+=":/home/linux/shell"


read : 从终端获取变量 
 1 一个read对应一个回车


===============================================================================================

2016.11.09  第二天

echo -n  打印不换行

expr 简单的表达式运算 
注意 ： 运算符两边要加空格

eg： echo `expr 1 + 5`

练习： 计算表达式 2 * 3 + 15 - 18 / 3

a = 2 b = 3 c = 15 d = 18

1 从终端读入abcd
2 进行运算
3 打印运算结果

let ： 多种运算

+ - * / %  += -+.....

<<  >>  ^   &   |   ~

bc ： 小数运算


测试 ：

True False

test 语句

test  expression

数字  字符串   文件

用 [] 的形式 不要忘了空格


&&  ||  ！

-a  -o  


与 ： 一假则假  [ 1 -eq 2  -a  1 -eq 1]   [ 1 -eq 2 ] && [ 1 -eq 1 ]

或 ： 一真则真  [ 1 -eq 2  -o  1 -eq 1]   [ 1 -eq 2 ] || [ 1 -eq 1 ]

非 ： 真变假 假变真 ! [ 1 -eq 2 ]


语句控制


if 语句

<1> 简单的if语句

 if    表达式
         		
then  
	命令表
         
fi     



创建一个文件 if_file  
测试文件是否创建成功
并打印文件的读写执行权限

exit


>100

(80 100]
(50  80]


(~ 0)
[0 50]


case


=========================================================================================================



2016.11.10  第三天

1. for循环

for   变量名   in   单词表
do
  命令表
done

简单的for循环

{} 的用法  不可以用变量

没有单词表的情况，直接从命令行传入单词表

类c语言的写法


while 循环：

while   逻辑表达式                          、
do
  命令表
done

continue : 结束本次循环，继续执行下次循环
break : 终止循环
什么是死循环 true false



======================================================================================

2016.11.11  第四天

函数 ：

1. 函数必须先定义后使用

2.目的 ： 为了代码的复用，是封装性的基本体现

3 在shell中函数的定义 和实现是在一起的

4 函数的三要素：功能，参数，返回值

5 在shell中也有内建函数和自定义函数

function function_name ( )
{
 command1
 ……
 commandn
 }

 作用域：
 局部作用域：只有在作用范围内可以使用
 在函数内：local name

 全局作用域：可以在文件的任意地方使用
当局部变量与全局变量重名时，在局部会默认使用局部变量


递归调用

函数内部调用自身
注意 ：要有结束条件

&& 列表：知道有一个为false 就不再执行
|| 列表：如果有一个是True就不再执行下一个

set 的使用
-e  +e
-x  +x

数组 ：  数据的集合

如何定义数组
数组取值
打印
遍历
求长度
求某一个元素的长度

基础练习：

1.在家目录分别建立文件夹filedir 和 dirdir
2. 如果原来存在同名的文件夹则删除原有文件夹
3.将当前目录下的内容分类存放，如果是普通文件则存放在filedir如果是
目录则存放在dirdir
4.将这两个文件夹分别用tar的方式以gz和bz2的方式压缩，然后存放到/mnt/hgfs/share文件夹
5.进入 /mnt/hgfs/share文件夹进行解压
================================================================================================

  
 2016.11.14 第五天

正则表达式：
正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，
组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。

给定一个正则表达式和另一个字符串，我们可以达到如下的目的：
1. 给定的字符串是否符合正则表达式的过滤逻辑（称作“匹配”）；
2. 可以通过正则表达式，从字符串中获取我们想要的特定部分。
正则表达式的特点是：
1. 灵活性、逻辑性和功能性非常的强；
2. 可以迅速地用极简单的方式达到字符串的复杂控制。
3. 对于刚接触的人来说，比较晦涩难懂。

支持多种编程语言及脚本

在shell中通常与grep sed  awk  find 等命令一起使用

规则 ：

*    0个或多个在*字符之前的那个普通字符
.    匹配任意一个字符
^    匹配行首
$    匹配行尾

^$  : 匹配空行
^.....$ : 匹配一整行的内容

[] :匹配字符集合,匹配一个字符   1-9 a-z  A-Z
[^...]:匹配除了...之外的

\ ： 转义字符

\<...\>: 精确匹配

\{n\} : 匹配前面字符出现n次
\{n,\} : 匹配前面字符至少出现n次
\{n,m\} : 匹配前面字符出现n--m次

扩展正则表达式匹配
awk  perl

? : 匹配0个或1个之前的字符
+ : 匹配1个或多个之前的那个普通字符
() ： 表示一个字符集合
|  ： 表示或

(a | b | c)  ---> [abc]


grep  -c  只显示数量
      -n  显示行号
      -v  显示除了模式的其他
      -i  大小写不敏感
      -h  多个文件时不显示文件名
      -l  只显示匹配到的文件名
      -r  在子目录中逐层查找
      -E  支持扩展正则表达式
      -e  实现多个查询条件

vim
ctrl alt  t
ctrl shift  n
ctrl shift  t    ctrl + num 切换
exit 退出

i光标前  I行首 o下一行 O当前行 a光标后 A行尾  不同的位置标示进入插入模式

s : 删除光标所在字符进入插入模式
S ：删除光标所在行进入插入模式

b单词开头 e单词结尾 w下一个单词 0行首 $行尾  gg首行  G末行   hjkl 光标跳转命令
cc 删除当期那行进入插入模式
c + b|e|w|0|$  :剪切光标到指定位置进入插入模式
y + b|e|w|0|$  ：复制光标到指定位置
u : 撤销上一步操作
ctrl + r  ：反撤销

x : 删除字符

r ： 替换字符
R : 进入替换状态直到esc退出

/ :进入底行查找   n 进行查找跳转

:  : 进入底行命令

:n,my
:n,md
:num
:w filename

:read filename
:%s/oldword/newword/g
:vsp  左右
:sp 上下

sed 命令及sed编程

sed 是一个非交互式的文本编辑器

sed 主要应用场景：

1.编辑相对交互式文本编辑器而言太大的文件。
2.编辑命令太复杂，在交互式文本编辑器中那一输入
3.对文件扫描一遍，但是需要执行多个编辑函数的情况。

运行
1 在 shell命令行输入sed命令
sed [选项]  ‘sed命令’  输入文件

2 将sed命令插入脚本执行
./sed

选项
-n : 不打印所有行到标准输出

-e : 表示下一个字符串是sed命令

-f : 表示正在调用脚本文件

-i : 直接修改操作文件内容

命令
1 要操作的范围
  使用行号或者正则表达式

  x    指定行号
  x,y  指定从x行到y行
  x,y! 指定不包含x和y行的行

  /pattern/   查询包含模式的行
  /pattern/pattern/

  /pattern/,x  从匹配行到x行
  x,/pattern/

2 具体命令
  p  打印匹配行
  =  打印文件行号
  a\ 在定位行之后追加文本信息

编程语言分类

编译型语言   解释型语言    半编译半解释语言

机器语言  低级语言  高级语言

面向过程   面向对象

技术层面 ： 职业分工
硬件工程师   裸机开发  系统工程师   驱动工程师   软件工程师（win  android  ios  linux 网络软件）

网站开发














































  
